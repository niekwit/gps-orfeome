name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  Formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 # Recommended to use latest stable v4 or v3
      - name: Formatting
        uses: github/super-linter@v5 # Recommended to use latest stable v5 or v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_SNAKEMAKE_SNAKEFMT: true

  Linting:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4 # Recommended to use latest stable v4 or v3
    - name: Lint workflow
      uses: snakemake/snakemake-github-action@v2 # Recommended to use latest stable v2
      with:
        directory: .test
        snakefile: workflow/Snakefile
        args: "--lint"

  Unit-Tests: # Renamed this job slightly for clarity and moved it up
      runs-on: ubuntu-latest
      needs: [Linting, Formatting]
      steps:
        - uses: actions/checkout@v4 # Use latest stable version
        - name: Set up Python
          uses: actions/setup-python@v5 # Use latest stable version
          with:
            # IMPORTANT: Match the Python version you develop/test with.
            # If you decided on Python 3.11 as a stable base for your Snakemake envs,
            # it's usually best to test your package on that version too.
            python-version: '3.12' # Changed from '3.12' if you are targeting 3.11

        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            # Install your package in editable mode.
            # This implicitly installs dependencies from pyproject.toml -> project.dependencies
            pip install -e .
            # Explicitly list additional test-specific dependencies not in project.dependencies
            # These are typically development dependencies only for testing.
            pip install unittest-xml-reporting # For JUnit XML output (optional)
            # You might not need to explicitly install PyGithub, pydot, configparser, appdirs here
            # if they are correctly listed in your pyproject.toml's [project].dependencies
            # and pip install -e . handles them. If not, then keep them.
            # Example if needed: pip install PyGithub pydot configparser appdirs

        - name: Run unit tests
          run: |
            # If your test file is directly in the root and named test_*.py:
            python -m unittest discover -s . -p 'test_*.py' -v
            # If your tests are in a 'tests' directory as commonly recommended:
            # python -m unittest discover -s tests -p 'test_*.py' -v
          # You typically don't need GITHUB_TOKEN for unit tests, as you're mocking network calls.
          # Only include if you have integration tests that truly hit the GitHub API.
          # env:
          #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Testing: # Main Snakemake workflow testing job
    runs-on: ubuntu-latest
    needs:
      - Linting
      - Formatting
    steps:
    - uses: actions/checkout@v4 # Use latest stable version
    - name: Test workflow
      uses: snakemake/snakemake-github-action@v2 # Use latest stable version
      with:
        directory: .test
        snakefile: workflow/Snakefile
        args: "--use-conda --show-failed-logs --cores 3 --conda-cleanup-pkgs cache"

    - name: Test report
      uses: snakemake/snakemake-github-action@v2 # Use latest stable version
      with:
        directory: .test
        snakefile: workflow/Snakefile
        args: "--report report.zip"